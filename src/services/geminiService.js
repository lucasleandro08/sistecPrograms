import { GoogleGenerativeAI } from '@google/generative-ai';

// Inicializar o Gemini
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// ‚úÖ CORRIGIR: Declarar ambos os modelos
const TRIAGEM_MODEL = genAI.getGenerativeModel({ model: "gemini-2.0-flash" });
const RESOLUCAO_MODEL = genAI.getGenerativeModel({ model: "gemini-2.0-flash" }); 
// Servi√ßo de triagem de chamados
export const triagemChamado = async (chamadoData) => {
  try {
    console.log('ü§ñ Iniciando triagem IA para chamado:', chamadoData.id_chamado);
    
    const prompt = `
    Voc√™ √© um sistema de triagem de chamados de TI. Analise o seguinte chamado e forne√ßa uma classifica√ß√£o:

    DADOS DO CHAMADO:
    - ID: ${chamadoData.id_chamado}
    - T√≠tulo: ${chamadoData.titulo}
    - Categoria: ${chamadoData.categoria}
    - Problema: ${chamadoData.problema}
    - Descri√ß√£o: ${chamadoData.descricao}
    - Prioridade: ${chamadoData.prioridade}
    - Usu√°rio: ${chamadoData.usuario}
    - Hist√≥rico do usu√°rio: ${chamadoData.historico || 'Primeiro chamado do usu√°rio'}

    Por favor, analise e retorne APENAS um JSON v√°lido com a seguinte estrutura:
    {
      "complexidade": "BAIXA|MEDIA|ALTA",
      "indice_impacto_alcance": "BAIXO|MEDIO|ALTO|CRITICO",
      "recomendacao": "IA|ANALISTA",
      "justificativa": "Explica√ß√£o detalhada da decis√£o",
      "solucao_conhecida": true/false,
      "tempo_estimado_minutos": 30,
      "tags": ["tag1", "tag2", "tag3"]
    }
    
    Crit√©rios para recomenda√ß√£o:
    - IA: Para problemas comuns, bem documentados, com solu√ß√µes padronizadas
    - ANALISTA: Para problemas complexos, espec√≠ficos, ou que requerem diagn√≥stico manual
    `;

    const result = await TRIAGEM_MODEL.generateContent(prompt);
    const response = await result.response;
    const text = response.text();
    
    console.log('ü§ñ Resposta bruta da triagem IA:', text);
    
    // Limpar o texto para extrair apenas o JSON
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Resposta da IA n√£o cont√©m JSON v√°lido');
    }
    
    // Parse da resposta JSON
    const analise = JSON.parse(jsonMatch[0]);
    
    return {
      success: true,
      analise,
      raw_response: text
    };
    
  } catch (error) {
    console.error('‚ùå Erro na triagem IA:', error);
    return {
      success: false,
      error: error.message,
      // Fallback para analista humano
      analise: {
        complexidade: 'MEDIA',
        indice_impacto_alcance: 'MEDIO',
        recomendacao: 'ANALISTA',
        justificativa: 'Erro na an√°lise autom√°tica - encaminhando para analista humano',
        solucao_conhecida: false,
        tempo_estimado_minutos: 60,
        tags: ['erro_ia']
      }
    };
  }
};

// Servi√ßo de resolu√ß√£o autom√°tica - MELHORADO
export const resolverChamado = async (chamadoData, analiseTriagem) => {
  try {
    console.log('ü§ñ Gerando solu√ß√£o IA para chamado:', chamadoData.id_chamado);
    
    const prompt = `
    Voc√™ √© um especialista em suporte t√©cnico de TI. Forne√ßa uma solu√ß√£o PR√ÅTICA e DIRETA:

    DADOS DO CHAMADO:
    - T√≠tulo: ${chamadoData.titulo}
    - Categoria: ${chamadoData.categoria}
    - Problema: ${chamadoData.problema}
    - Descri√ß√£o: ${chamadoData.descricao}
    - Prioridade: ${chamadoData.prioridade}
    - An√°lise de Triagem: ${JSON.stringify(analiseTriagem)}

    INSTRU√á√ïES IMPORTANTES:
    - Responda em portugu√™s brasileiro
    - Use linguagem simples e clara
    - M√ÅXIMO 800 CARACTERES
    - Seja direto e objetivo
    - Forne√ßa apenas os passos essenciais
    - Use formata√ß√£o clara com numera√ß√£o

    ESTRUTURA OBRIGAT√ìRIA:
    **Solu√ß√£o:**
    1. [Primeiro passo espec√≠fico]
    2. [Segundo passo espec√≠fico]
    3. [Terceiro passo se necess√°rio]

    **Como testar:** [Uma frase sobre como confirmar se funcionou]

    **Se n√£o funcionar:** Entre em contato com o suporte para assist√™ncia especializada.

    IMPORTANTE: Seja conciso e pr√°tico. N√£o inclua explica√ß√µes t√©cnicas desnecess√°rias.
    `;

    // ‚úÖ USAR O MODELO CORRETO
    const result = await RESOLUCAO_MODEL.generateContent(prompt);
    const response = await result.response;
    let solucao = response.text();
    
    // ‚úÖ LIMITAR RESPOSTA SE MUITO LONGA
    if (solucao.length > 1200) {
      console.log('‚ö†Ô∏è Resposta muito longa, truncando...');
      solucao = solucao.substring(0, 1197) + '...';
    }
    
    console.log('ü§ñ Solu√ß√£o gerada (comprimento:', solucao.length, 'caracteres)');
    
    return {
      success: true,
      solucao,
      data_resposta: new Date().toISOString(),
      tipo_resposta: 'IA_RESOLUCAO'
    };
    
  } catch (error) {
    console.error('‚ùå Erro na resolu√ß√£o IA:', error);
    return {
      success: false,
      error: error.message,
      solucao: 'N√£o foi poss√≠vel gerar uma solu√ß√£o autom√°tica. Este chamado ser√° encaminhado para um analista humano.'
    };
  }
};

// Fun√ß√£o para testar se a IA est√° funcionando
export const testarConexaoGemini = async () => {
  try {
    const prompt = "Responda apenas 'OK' se voc√™ est√° funcionando corretamente.";
    const result = await TRIAGEM_MODEL.generateContent(prompt);
    const response = await result.response;
    const text = response.text().trim();
    
    return {
      success: text.includes('OK'),
      response: text
    };
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√£o Gemini:', error);
    return {
      success: false,
      error: error.message
    };
  }
};
